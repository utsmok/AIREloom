[project]
name = "aireloom"
version = "1.0.0"
description = "Python interface for the OpenAIRE Graph API"
authors = [
    {name = "Samuel Mok",email = "s.mok@utwente.nl"}
]
readme = "README.md"
license = {text= "MIT"}
requires-python = ">=3.12"
dependencies = [
    "httpx",
    "polars",
    "loguru",
    "pydantic",
    "pydantic-settings>=2.9.1",
    "tenacity>=9.1.2",
    "certifi",
    "cachetools>=5.3.0",
]
[dependency-groups]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=6.1.1",
    "pytest-httpx>=0.35.0",
]
docs = [
    "mkdocs~=1.6.0",
    "mkdocs-material~=9.5.0",
]
lint = ["ruff"]
test = ["pytest", "pytest-randomly"]






[project.urls]
"Homepage" = "https://github.com/utsmok/aireloom"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv.pip]
generate-hashes = true

[tool.ruff]
line-length = 88

[tool.ruff.format]
# formatting of code snippets in docstrings.
docstring-code-format = true
docstring-code-line-length = 60

[tool.ruff.lint]
# defaults are `E4`, E7`, `E9`, and `F`
select = [
    "E4",
    "E7",
    "E9",
    "F",
    "I", # isort
    "B", # bugbear -- flake8 bugfinder
    "Q", # correct quotes usage
    "PTH",  # Replace os functions with pathlib functions
    "SIM", # Simplify statements
    "RET", # Return value related rules
    "PIE", # misc flake8 rules
    "FBT", # boolean traps
    "PERF", # performance optimization
    "PL", # pylint
    "UP", # check for deprecated ways of coding
    "FURB",
]

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"aireloom/client.py" = ["PLR0913", "PLR0912", "PLR0915"]  # Complex client methods are acceptable

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
